0. 초기화
git init 함수가 작동이 안 될 경우, VS Code 의 Terminal 이 Power Shell 로 설정되어 있기 때문인 경우가 다반수
Select Default Shell 을 선택하여 VS Code 의 Terminal 을 Git Bash 로 바꿔준 후 프로그램을 재실행 하면 설정 가능 ! 설정 후 함수 재사용 하면 됨.
git 작동 방식
Working tree -> Staging Area -> Repository
Working tree : 버전으로 만들어지기 전 단계. 파일을 수정하고, 수정된 파일들이 있는 곳
Staging Area : 버전이 될 파일들을 올려놓는 곳. 버전으로 만들 파일 두개를 Staging Area 에 올려놓으면 git 은 Staging Area 에 있는 두 파일을 하나의 버전으로 만듬.
Repository : 버전이 저장되는 곳(.git)
CRUD : Create Read Update Delete

commit message format
*commit message 에는 버전도 적어주는 것이 매우매우 매우 좋음 !
추가 : add
삭제 : del
함수 : 함수 카테고리(basic function) 함수 종류[함수 이름(git diff) / 함수 이름(git rest --hard), 함수 종류[diff]]

How to upload to github
at the first time
    git remote add origin [url] : origin : 단축 이름(차후(ex. push)에 url 대신 사용) origin 이란 이름의 원격 저장소(remote-repository)로 사용하겠다는 의미
    git branch -M [new-name]
    git push -u origin main
after
    git push -u origin main

How to Download from github
at the first time
    git clone [url]
after
    git pull 

How to Generate new token
github -> settings -> Developer settings -> Personal access tokens -> Generate new token -> Note(토큰 설명) -> Select scopes -> Generate token
(체크박스는 repo 만 해도 됨)
======================================================================================================================================================
Error !
remote: Invalid username or password.
fatal: Authentication failed for 'https://github.com/dldudals0728/github_menual.git/'
=> 원격 저장소 삭제 후, 다시 연결하기 !
1. 원격 저장소 삭제
    git remote remove origin
2. 원격 저장소 연결
    git remote add origin url
3. 그 다음 push !
======================================================================================================================================================

꿀팁
터미널이 작아서 출력이 모두 안되는 경우, 아래 방향키, e(한 줄씩), d(한 뭉텅이씩) 를 누르면 하위 내용을 보여줌
change git text editor
검색엔진 : change git default text editor
    ex. git config --global core.editor "vim" : config : git 의 설정을 바꿈, --global : 현재 저장소가 아닌 컴퓨터 전체, 로그인한 사용자 전체, \
    core.editor : 에디터를, vim : vim editor
git menual
git FunctionName --help
검색엔진 : diff tool / gitignore / tag(commit id 대체)
=======================================================================================================================================================
함수 목록
일반함수
~ : print current directory
cd : change directory
ls -al : read list, all
nano : make file and write. example. nano hello1.txt
cat : cat FileName.extension : File 의 내용을 보여줌
touch : make file
rm : remove file or directory (rm -r .git)
-------------------------------------------------------------------------------------------------------------------------------------------------------
git 함수
git init . : Initialize repository.
             현재 dir 을 git 이 관리하도록 하는 것.
             .git 폴더가 생성되는데, 이 폴더에 모든 version 들이 관리되는 것이므로, 절대 삭제 X !
-------------------------------------------------------------------------------------------------------------------------------------------------------
config : git config --global user.name "Your Name" : git account name
        : git config --global user.email "you@example.com" : git account email
        사용자의 이름과 이메일을 등록하는 함수. commit 시 사용자 개인의 commit 으로 넘어감(추측)
        이 함수를 다시 사용하여 "Your Name" 과 "you@example.com" 을 다르게 작성하면 git account Name 과 email 을 바꿀 수 있다.
        : git config --global core.quotepath false : 한글이 출력될 수 있도록 해줌
-------------------------------------------------------------------------------------------------------------------------------------------------------
status : git status : working tree status
                        가장 많이 사용되는 명령어. git 의 상태를 보여줌.

                        No commits yet : 아직 버전이 없음(commits == version)
                        Untracked files : 추적되지 않은 파일
                        Changes to be committed : 버전이 될 파일들의 목록을 보여줌

                        Changes not staged for commit : stage 위에 있지 않은 수정사항이 Working tree 에 있다.
-------------------------------------------------------------------------------------------------------------------------------------------------------
add : git add FileName[-A] : add to staging area
                             git 이 FileName 을 관리하도록 함. 버전으로 만들기 위해 Staging Area 에 올릴 때 사용되는 명령어. \
                             Working tree 의 수정사항인 FileName 을 버전으로 만들기 위해 Staging Area 로 올림
                             FileName1 FileName2 FileName3 ... FileName7 이런식으로 여러개를 한번에 올릴 수 있음
    : git add DirName : DirName 디렉토리 밑에 있는 모든 파일 add
    : git add . : 현재 디렉토리 밑에 있는 모든 파일 add.
    : git reset HEAD FileName : cancel git add(Staging Area -> Working tree)
                                FileName 이 생략되면 add 한 모든 파일을 취소한다.
-------------------------------------------------------------------------------------------------------------------------------------------------------
commit : git commit (-m "commit message") : create version
                                            버전을 생성하기 위해 제출(commit)함. 인터페이스 생각보다 복잡하니까 그냥 -m~ 함수 쓰자,,
        : git commit -am "commit message" : run add and commit same time
                                            add 와 commit 을 한번에 함. 단, add 가 적어도 한번이상 된, 즉 Untracked 된 파일은 안됨 !! -> 실수 방지
        : git commit --amend -m "modified commit message"  : 가장 마지막에 commit 된 버전의 commit message 를 변경할 수 있다.
-------------------------------------------------------------------------------------------------------------------------------------------------------
log : git log : show version
                git 의 역사를 보여줌. 버전이 잘 만들어졌는지 확인할 수 있음. (q : 나가기)
    : git log --stat : 
                        각 버전이 어떤 파일을 가지고 있는지 보여주고, 각 파일의 수정사항 들을 나타냄.
                        git_CLI.txt | 22 ++++++++++++++++++---- 22개의 수정사항이 있었고
                        1 file changed, 18 insertions(+), 4 deletions(-) 1개의 파일이 바뀌고, 18줄이 추가되었으며, 4줄이 삭제되었다.
    : git log -p : show version with modifies
                    각 버전의 수정사항을 보여줌
                    --- /dev/null 이전 버전은 없다.(새로 생성된 파일)
                    +++ b/git_CLI.txt

                    --- a/git_CLI.txt 이 버전은 git_CLI.txt 를 포함하고 있다.
                    +++ b/git_CLI.txt
    : git log --graph --all --decorate : log 를 그래프 형식으로 보여줌.
-------------------------------------------------------------------------------------------------------------------------------------------------------
reset : git reset [commitID(6)] --hard : 이전 버전으로 이동. log 까지 전부 사라짐. 수정하고 있던 내용 마저도 다 사라짐. (신중함 필요)
                                            + [commitID(6)] => commitID 전체를 적어도 되고, commitID 가 마지막으로 와도 됨.
                                 --soft : 버전만 지우고 수정하고 있던 내용은 살림. --mixed 도 비슷한 기능
-------------------------------------------------------------------------------------------------------------------------------------------------------
revert : git revert [commitID(6)] : 이전 버전으로 이동. 단, revert 는 reset 과 달리 돌아갈 시점이 아닌 취소할 시점의 commitID 를 사용 \
                                        log 에 행적이 남음(버전이 새로 생김)
                                        + [commitID(6)] => commitID 전체를 적어도 되고, commitID 가 마지막으로 와도 됨.
                                        + 그대로 저장하겠다는 :wq or ctrl(^) + X -> Y -> Enter 입력
                                        ! danger ! 바로 직전 단계가 아닌, 2단계 이상의 버전으로 가고 싶다면 그 앞 버전을 revert 하는 것이 아니라 가장 최신 버전부터 \
                                        revert .. revert .. revert ..... revert 해야 함 ! 바로 revert 하면 충돌이 일어남
-------------------------------------------------------------------------------------------------------------------------------------------------------
diff : git diff : show difference
                : 가장 최근 버전과 달라진 점을 보여줌.
     : reset --hard : 편집했던 내용들을 삭제함.
-------------------------------------------------------------------------------------------------------------------------------------------------------
checkout : git checkout [commitID] : go to created point[commitID]
                                        HEAD가 commitID 가 가리키는 버전, 즉 해당 버전이 생긴 시점을 가리키도록 한다. -> 해당 버전이 생긴 시점으로 감.
                                        commitID 를 main(master) 로 지정하면 가장 최신, master branch 로 다시 이동한다.
                                        commitID 가 아닌 BranchName 을 작성하면 BranchName branch 로 넘어감
         : git checkout -b [BranchName] : git branch [BranchName] + git checkout [BranchName]
         : git checkout -b [Local-new-branch] [remote-repository]/[remote-branch] : 로컬에 [Local-new-branch] 를 만들어서 원격의 [remote-repository] 의 \
                                                                                    [remote-branch] 를 받아와서 그 branch 로 넘어감
-------------------------------------------------------------------------------------------------------------------------------------------------------
branch : git branch : show branch(가지)
                        현재 branch 들을 보여줌.
        : git branch BranchName : 이름이 BranchName 인 branch 를 생성함. 여기서 생성된 branch 는 원 branch(현재 선택되어 있는 branch) 의 현 상태를 그대로 가져옴.(평행우주)
        : git branch -d BranchName : delete BranchName
        : git branch -M [new-name] : rename present branch
        : git branch -m [old-name] [new-name] : rename present branch
        : git branch -a : show local and remote (all) branch
        : git branch -r : show remote branch
-------------------------------------------------------------------------------------------------------------------------------------------------------
merge : git merge [BranchName to be merged] : merge branch
                                                병합 할 분기(main) 인 상태에서 변화를 가져올 branch(병합 할 분기) 를 입력한다.
                                                window 에서는 바로 되지만, mac 에서는 commit message 를 작성하는 edit 이 실행되기 때문에 저장하고 나가기(:wq)를 해준다.
                                                병합할 두 분기가 서로 같은 부분을 다르게 수정했다면 충돌(conflict)이 발생하여 그 부분을 수정한 뒤 merge 해야 함.
-------------------------------------------------------------------------------------------------------------------------------------------------------
rebase : git rebase [BranchName to be rebased] : rebase branch
                                                    분기를 재배치 한다. merge 와 같은 개념이지만, rebase 는 말 그대로 재배치 하여 한 줄로 통합한다.
-------------------------------------------------------------------------------------------------------------------------------------------------------
remote : git remote : show remote repository
                        현 폴더의 원격 저장소를 나타냄.
         git remote add origin https://github.com/dldudals0728/github_menual.git : 이 github 의 저장소를 이 폴더의 origin 이란 이름의 원격 저장소로 설정하겠다는 의미.
         git remote -v : 원격 저장소의 상태
         git remote rename [old-name] [new-name] : change github remote repository name
-------------------------------------------------------------------------------------------------------------------------------------------------------
push : git push -u origin main : 폴더의 현 branch 에 commit 된 내용들을 origin 이란 이름의 원격 저장소의 main 이란 branch 에 올린다는 의미.
                                 (현재 위치한 branch 의 source ==> remote repository(name=origin)의 branch(name=main))
     : git push -d [remote-repository] [remote-BranchName] : delete remote BranchName
-------------------------------------------------------------------------------------------------------------------------------------------------------
pull : git pull : github 에 업로드된 내용을 다운로드하여 merge 함.(현재 사용하고 있는 branch 에 remote 되어있는 branch 를 pull 함.)
                    pull 을 하지 않은 상태에서 push 를 하려고 하면 충돌이 일어나기 때문에, 모든 작업 전에는 꼭 pull 해주는 것이 좋음.
     : git pull [remote-repository-name] [local-branch-name] : [remote-repository-name] 의 [local-branch-name] 만 pull.
-------------------------------------------------------------------------------------------------------------------------------------------------------
clone : git clone [url] : download source from github
                            github 에 저장되어 있는 파일을 가져온다. (clone 은 처음에만 하고 그 다음부터는 pull 을 하면 된다고 보면 됨.)
-------------------------------------------------------------------------------------------------------------------------------------------------------
fetch : git fetch : fetch local source(compare github remote repository)
                    현재 내 source 와 github 에 업로드 되어있는 source 를 비교할 수 있도록 패치한다. (다른사람과의 협업시 유용)
                    변동사항이 있을때는 항상 fetch 해주는 것이 좋음 !
                    git fetch -> git status 를 해보면 commit 이 뒤쳐져 있는지 확인할 수 있음
-------------------------------------------------------------------------------------------------------------------------------------------------------
rm : git rm [file-name] : remove file remote & local repo
     git rm --cached [file-name] : remove file only remote repo
     git rm -r [file-name] : remove folder (all file in folder)
=======================================================================================================================================================
파일 목록
-------------------------------------------------------------------------------------------------------------------------------------------------------
.gitignore : git 으로 관리하고 github 에 올릴 필요가 없거나 오히려 그래서는 안되는 파일들(ex. 코드를 실행하면 자동으로 다운받아지는 파일 or 코드대로 빌드되서 자동으로 생성되는 파일 / \
             보안적으로 중요한 내용)을 작성하여 그 파일들이 push 되는 것을 막아준다.
             참고 링크 : http://attlassian.com/git/tutorials/saving-changes/gitignore
             